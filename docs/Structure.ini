CANDY/
├── .github/                        # CI/CD workflows for automated tests and builds
├── apps/                            # Standalone tools and user-facing applications
│    ├── BenchmarkTool/               # Application to benchmark vector database performance
│    │    ├── scenarios_config/        # Configuration for benchmark scenarios
│    │    ├── benchmark_tool.cpp
│    │    ├── scenarios.cpp
│    │    ├── scenarios.hpp
│    │    ├── CMakeLists.txt
│    │    └── README.md
│    ├── DBClient/                    # Command-line client to interact with the vector DB
│    │    ├── db_client.cpp
│    │    └── CMakeLists.txt
│    ├── OptimizerTool/               # ML-based optimization tools for hyperparameters
│    │    ├── ml_optimizer_tool.cpp
│    │    └── CMakeLists.txt
│    └── QueryTool/                   # Query tool for constructing and managing queries
│         ├── CMakeLists.txt
│         └── README.md
├── cmake/                           # Custom CMake modules, toolchains, and macros
├── cmake-build-debug/               # Debug build output
├── cmake-build-release/             # Release build output
├── docs/                            # Project documentation
│    ├── Design.md                    # Design-related documentation
│    └── Structure.md                 # Detailed code structure documentation
├── include/                         # Public header files
│    ├── algorithms/                  # Search and ML-related algorithms
│    │    ├── hnsw.hpp
│    │    ├── KNNSearch.hpp
│    │    ├── parallel_search_algorithm.hpp
│    │    ├── parallelhnsw.hpp
│    │    └── search_algorithm.hpp
│    ├── api/                         # API headers for the vector database
│    │    └── vectordb_stream.hpp
│    ├── core/                        # Core database functionalities
│    │    ├── partitioning.hpp
│    │    ├── transaction.hpp
│    │    ├── vector_db.hpp
│    │    └── versioning.hpp
│    ├── gpu/                         # GPU-specific utilities (kernels, memory, scheduler)
│    │    ├── gpu_kernels.cuh
│    │    ├── gpu_memory.hpp
│    │    └── gpu_scheduler.hpp
│    ├── io/                          # I/O utilities, persistence, and WAL
│    │    ├── backup_restore.hpp
│    │    ├── data_loader.hpp
│    │    ├── s3_storage.hpp
│    │    └── wal.hpp
│    ├── optimization/                # Optimization utilities (e.g., DRL, model optimization)
│    │    ├── drl_optimization.hpp
│    │    ├── ml_models.hpp
│    │    └── model_training.hpp
│    ├── parallelism/                 # Concurrency control and thread management
│    │    ├── locks.hpp
│    │    └── task_scheduler.hpp
│    ├── performance/                 # Performance monitoring and benchmarking tools
│    │    ├── benchmark.hpp
│    │    ├── gpu_benchmark.hpp
│    │    └── monitoring.hpp
│    ├── transaction/                 # Transactional management, deadlock prevention
│    │    └── deadlock_prevention.hpp
│    └── utils/                       # General utility functions (logging, configuration, etc.)
│         ├── config_parser.hpp
│         ├── error_handling.hpp
│         ├── file_loader.hpp
│         ├── IntelliLog.hpp
│         ├── safe_queue.hpp
│         ├── thread_pool.hpp
│         └── timing.hpp
├── installation/                    # Installation scripts for Docker, dependencies
├── python_bindings/                 # Python bindings for accessing C++ components
├── src/                             # Source code implementation
│    ├── algorithms/                  # Algorithm implementations
│    │    ├── HNSW.cpp
│    │    ├── knn_search.cpp
│    │    ├── parallelhnsw.cpp
│    │    └── search_algorithm.cpp
│    ├── api/                         # REST/gRPC API implementations
│    │    └── StreamAPI.cpp
│    ├── core/                        # Core vector database logic
│    │    ├── partitioning.cpp
│    │    ├── transaction.cpp
│    │    ├── vector_db.cpp
│    │    └── versioning.cpp
│    ├── gpu/                         # GPU acceleration modules
│    │    ├── gpu_kernels.cu
│    │    ├── gpu_memory.cpp
│    │    └── gpu_scheduler.cpp
│    ├── io/                          # I/O related modules
│    │    ├── backup_restore.cpp
│    │    ├── data_loader.cpp
│    │    ├── s3_storage.cpp
│    │    └── wal.cpp
│    ├── optimization/                # ML-based or heuristic optimization
│    │    ├── drl_optimization.cpp
│    │    ├── ml_models.cpp
│    │    └── model_training.cpp
│    ├── parallelism/                 # Concurrency and parallel execution
│    │    ├── locks.cpp
│    │    └── task_scheduler.cpp
│    ├── performance/                 # Performance tracking and profiling
│    │    ├── benchmark.cpp
│    │    ├── gpu_benchmark.cpp
│    │    └── monitoring.cpp
│    ├── transaction/                 # Transaction handling
│    │    └── deadlock_prevention.cpp
│    └── utils/                       # Utility implementations
│         ├── config_parser.cpp
│         ├── error_handling.cpp
│         ├── file_loader.cpp
│         ├── logging.cpp
│         ├── safe_queue.cpp
│         ├── thread_pool.cpp
│         └── timing.cpp
├── test/                            # Unit and integration tests
│    ├── core_tests/                  # Core functionality tests
│    │    ├── core_tests.cpp
│    │    └── TorchTests.cpp
│    ├── utils_tests/                 # Tests for utility modules
│    │    ├── config_parser_tests.cpp
│    │    ├── file_loader_tests.cpp
│    │    └── thread_pool_tests.cpp
│    ├── gpu_tests/                   # Tests for GPU modules and acceleration
│    ├── parallelism_tests/           # Tests for concurrency controls
│    ├── api_tests/                   # API integration tests
│    ├── algorithms_tests/            # Tests for search and ML algorithms
│    ├── io_tests/                    # Tests for I/O handling and WAL
│    └── performance_tests/           # Tests for performance and benchmarking
├── python/                          # Python support
│    ├── Embedding/                   # Utilities for embedding-related tasks
│    ├── Examples/                    # Example scripts for interacting with DB
│    ├── TextPreprocessor.py
│    ├── interactive_rag.py
│    └── requirements.txt
├── third_party/                     # External dependencies
│    └── (e.g., FAISS, Google Test)
├── Dockerfile                        # Dockerfile to build the project container
├── docker-compose.yml                # Docker Compose setup (if applicable)
├── LICENSE
├── README.md
└── CMakeLists.txt                    # Root CMake configuration file
